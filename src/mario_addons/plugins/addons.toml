### Convert yaml to json

[[command]]

name = "yml2json"
short_help = "Convert yaml to json"

[[command.stage]]
command = "stack"
params = {code="yaml.safe_load ! json.dumps"}

[[command.test]]
invocation = ["yml2json"]
input = '''{"x": 1,}
'''
output = '''{"x": 1}
'''


### Search for xpath elements with xpath

[[command]]
name="xpath"
short_help = "Find xml elements matching xpath query."
arguments = [{name="query", type="str"}]
inject_values=["query"]


help = """Pull data out of xml documents using xpath."""

[[command.stage]]

command = "stack"
params = {code="x.encode() ! io.BytesIO ! lxml.etree.parse ! x.findall(query) ! map(lambda y: y, x) ! list" }

[[command.stage]]
command="chain"


[[command.test]]
invocation = ["xpath", "//", "map", "x.text"]
input = '''
<slide type="all">
<title>Overview</title>
<item>Anything in here</item>
</slide>
'''
output = """
Overview
Anything in here
"""



### Generate json objects

[[command]]
name="jo"
short_help="Make json objects"
arguments=[{name="pairs", type="str"}]
inject_values=["pairs"]


[[command.stage]]
command = "eval"
params = {code="pairs"}

[[command.stage]]
command = "map"
params = {code="shlex.split(x, posix=False)"}

[[command.stage]]
command = "chain"

[[command.stage]]
command = "map"
params = {code="x.partition('=') ! [x[0], ast.literal_eval(re.sub(r'^(?P<value>[A-Za-z]+)$', r'\"\\g<value>\"', x[2]))]"}

[[command.stage]]
command = "apply"
params = {"code"="dict"}

[[command.stage]]
command = "map"
params = {code="json.dumps"}


[[command.test]]
invocation = ["jo", "x=1 y=2"]
input = ""
output = "{\"x\": 1, \"y\": 2}\n"


[[command]]
name = "read-jsonl"
short_help = "Load jsonlines into python objects"
section ="Read"

[[command.stage]]

command = "map"

params =  {code="json.loads"}

[[command.test]]
invocation = ["read-jsonl"]
input = """{"name": "Alice", "age": "21"}\n{"name": "Bob", "age": "22"}\n"""
output = """{'name': 'Alice', 'age': '21'}\n{'name': 'Bob', 'age': '22'}\n"""


[[command]]
name = "read-csv"
help = """

Read a csv file into Python dicts. Given a csv like this:


.. code-block::

    name,age
    Alice,21
    Bob,25

try:

.. code-block:: bash

    $ mario read-csv <<EOF
    name,age
    Alice,21
    Bob,25
    EOF
    {'name': 'Alice', 'age': '21'}
    {'name': 'Bob', 'age': '25'}


Specify the ``--delimiter=`` or ``--no-header`` options as needed.

"""
short_help = "Load csv rows into python objects"
inject_values=["delimiter", "header"]
section ="Read"

[[command.options]]
name = "--delimiter"
default = ","
help = "Field delimiter character"

[[command.options]]
name = "--header/--no-header"
default=true
help = "Treat the first row as a header?"

[[command.stage]]
command = "apply"
params = {code="mario_addons.plugins.addons.read_csv(x, header=header)"}

[[command.stage]]
command = "chain"

[[command.stage]]
command = "map"
params = {code="dict(x)"}

[[command.test]]
invocation = ["read-csv"]
input = """name,age\nAlice,21\nBob,22\n"""
output = """{'name': 'Alice', 'age': '21'}\n{'name': 'Bob', 'age': '22'}\n"""


[[command]]
name = "read-yaml"
short_help = "Read yaml document"
section = "Read"

[[command.stage]]
command = "stack"
params = {code="yaml.safe_load"}

[[command.test]]
invocation = ["read-yaml"]
input = "{'x': 1,}\n"
output = "{'x': 1}\n"

[[command]]
name = 'write-json'
short_help = "Write json document"
section = "Write"

[[command.stage]]
command = "apply"
params ={code="json.dumps"}

[[command.test]]
invocation = ["stack", "str.split", "write-json"]
input = "1 2\n"
output ="[[\"1\", \"2\"]]\n"


[[command]]
name = 'write-toml'
short_help = "Write toml document"
section = "Write"

[[command.stage]]
command = "map"
params ={code="toml.dumps"}

[[command.test]]
invocation = ["stack", "json.loads", "write-toml"]
input = '''{"x": 1}
'''
output = """x = 1\n\n"""
