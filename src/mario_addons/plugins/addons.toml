

[[command]]
name="xpath"
short_help = "Find xml elements matching xpath query."
arguments = [{name="query", type="str"}]
inject_values=["query"]


help = """Pull data out of xml documents using xpath.

For example,

.. code-block:: bash


    $ mario xpath '//'  map 'x.text' <<EOF
          <slide type="all">
            <title>Overview</title>
              <item>Anything <em>can be</em> in here</item>
              <item>Or <em>also</em> in here</item>
          </slide>
    EOF

    Overview
    Anything
    can be
    Or
    also

"""

[[command.stages]]

command = "stack"
params = {code="x.encode() ! io.BytesIO ! lxml.etree.parse ! x.findall(query) ! map(lambda y: y, x) ! list" }

[[command.stages]]
command="chain"


[[command.tests]]
invocation = ["xpath", "//", "map", "x.text"]
input = '''
<slide type="all">
<title>Overview</title>
<item>Anything in here</item>
</slide>
'''
output = """
Overview
Anything in here
"""



### Generate json objects

[[command]]
name="jo"
short_help="Make json objects"
arguments=[{name="pairs", type="str"}]
inject_values=["pairs"]


help = """

Create json objects by providing key=value pairs. The argument should be single-quoted if passed in a shell.

For example,

.. code-block:: bash

    $ mario jo 'name=Alice age=21 hobbies=["running"]'
    {"name": "Alice", "age": 21, "hobbies": ["running"]}


"""

[[command.stages]]
command = "eval"
params = {code="pairs"}

[[command.stages]]
command = "map"
params = {code="shlex.split(x, posix=False)"}

[[command.stages]]
command = "chain"

[[command.stages]]
command = "map"
params = {code="x.partition('=') ! [x[0], ast.literal_eval(re.sub(r'^(?P<value>[A-Za-z]+)$', r'\"\\g<value>\"', x[2]))]"}

[[command.stages]]
command = "apply"
params = {"code"="dict"}

[[command.stages]]
command = "map"
params = {code="json.dumps"}


[[command.tests]]
invocation = ["jo", "x=1 y=2"]
input = ""
output = "{\"x\": 1, \"y\": 2}\n"


[[command]]
name = "read-jsonl"
short_help = "Read jsonlines into Python objects"
section ="Read"

help = """

Read a sequence of json entities into Python objects.

For example,

.. code-block:: bash

    $ mario read-jsonl  <<EOF
    {"a":1, "b":2}
    {"a": 5, "b":9}
    EOF
    {'a': 1, 'b': 2}
    {'a': 5, 'b': 9}


"""

[[command.stages]]

command = "map"

params =  {code="json.loads"}

[[command.tests]]
invocation = ["read-jsonl"]
input = """{"name": "Alice", "age": "21"}\n{"name": "Bob", "age": "22"}\n"""
output = """{'name': 'Alice', 'age': '21'}\n{'name': 'Bob', 'age': '22'}\n"""


[[command]]
name = "read-json"
short_help = "Read json into Python objects"
section ="Read"

help = """

Read a single json string into a Python object.

For example,

.. code-block:: bash

    $ mario read-json  <<EOF
    [
        {"name": "Alice", "age": 21},
        {"name": "Bob", "age": 22}
    ]
    EOF
    [{'name': 'Alice', 'age': 21}, {'name': 'Bob', 'age': 22}]


"""

[[command.stages]]

command = "stack"

params =  {code="json.loads"}

[[command.tests]]
invocation = ["read-jsonl"]
input = """{"name": "Alice", "age": "21"}\n{"name": "Bob", "age": "22"}\n"""
output = """{'name': 'Alice', 'age': '21'}\n{'name': 'Bob', 'age': '22'}\n"""


[[command]]
name = "read-csv"
help = """

Read a csv file into Python dicts. Given a csv like this:


.. code-block::

    name,age
    Alice,21
    Bob,25

try:

.. code-block:: bash

    $ mario read-csv <<EOF
    name,age
    Alice,21
    Bob,25
    EOF
    {'name': 'Alice', 'age': '21'}
    {'name': 'Bob', 'age': '25'}


Specify the ``--delimiter=`` or ``--no-header`` options as needed.

"""
short_help = "Load csv rows into python objects"
inject_values=["delimiter", "header"]
section ="Read"

[[command.options]]
name = "--delimiter"
default = ","
help = "Field delimiter character"

[[command.options]]
name = "--header/--no-header"
default=true
help = "Treat the first row as a header?"

[[command.stages]]
command = "apply"
params = {code="mario_addons.plugins.addons.read_csv(x, header=header)"}

[[command.stages]]
command = "chain"

[[command.stages]]
command = "map"
params = {code="dict(x)"}

[[command.tests]]
invocation = ["read-csv"]
input = """name,age\nAlice,21\nBob,22\n"""
output = """{'name': 'Alice', 'age': '21'}\n{'name': 'Bob', 'age': '22'}\n"""


[[command]]
name = "read-yaml"
short_help = "Read yaml document"
section = "Read"

help = """

Read a yaml document into a Python object.

For example,

.. code-block:: bash

    $ mario read-yaml <<EOF
    - Cat: "foo"
    - Dog: "bar"
    - Goldfish: "baz"
    EOF
    [{'Cat': 'foo'}, {'Dog': 'bar'}, {'Goldfish': 'baz'}]

"""

[[command.stages]]
command = "stack"
params = {code="yaml.safe_load"}

[[command.tests]]
invocation = ["read-yaml"]
input = "{'x': 1,}\n"
output = "{'x': 1}\n"



[[command]]
name = "read-toml"
short_help = "Read toml document"
section = "Read"

help = """

Read a toml document into a Python object.

For example,

.. code-block:: bash

    $ mario read-toml  <<EOF
    [[persons]]
    name = "Alice"
    age = 21

    [[persons]]
    name = "Bob"
    age = 22
    EOF
    {'persons': [{'name': 'Alice', 'age': 21}, {'name': 'Bob', 'age': 22}]}

"""

[[command.stages]]
command = "stack"
params = {code="toml.loads"}

[[command.tests]]
invocation = ["read-toml"]
input = """
[[persons]]
name = "Alice"
age = 21

[[persons]]
name = "Bob"
age = 22
"""
output = "{'persons': [{'name': 'Alice', 'age': 21}, {'name': 'Bob', 'age': 22}]}\n"




[[command]]
name = 'write-json'
short_help = "Write json document"
section = "Write"

help = """

Serialize each input item to its json representation.

For example,

.. code-block:: bash

    $mario eval "[1, 2, 'foo']" write-json
    [1, 2, "foo"]


Use the ``--indent`` option to set the indentation level:

.. code-block::

    $ mario read-toml write-json --indent=4 <<EOF
    [[persons]]
    name = "Alice"
    age = 21

    [[persons]]
    name = "Bob"
    age = 22
    EOF
    {
        "persons": [
            {
                "name": "Alice",
                "age": 21
            },
            {
                "name": "Bob",
                "age": 22
            }
        ]
    }


"""
inject_values = ["indent"]


[[command.options]]
name = "--indent"
type = "int"

[[command.stages]]
command = "map"



[command.stages.params]
code = "json.dumps(x, indent=indent)"

[[command.tests]]
invocation = ["stack", "str.split", "write-json"]
input = "1 2\n"
output ="[\"1\", \"2\"]\n"



[[command]]
name = 'write-toml'
short_help = "Write toml document"
section = "Write"
help = """
Write each input item to its toml representation.

For example,

.. code-block::


    $ mario read-json write-toml <<EOF
    {
        "persons": [
            {
                "name": "Alice",
                "age": 21
            },
            {
                "name": "Bob",
                "age": 22
            }
        ]
    }
    EOF
    [[persons]]
    name = "Alice"
    age = 21

    [[persons]]
    name = "Bob"
    age = 22


"""

[[command.stages]]
command = "map"
params ={code="toml.dumps"}

[[command.tests]]
invocation = ["stack", "json.loads", "write-toml"]
input = '''{"x": 1}
'''
output = """x = 1\n\n"""
